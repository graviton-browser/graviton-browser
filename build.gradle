buildscript {
    ext.kotlin_version = '1.3.10'

    repositories {
        mavenCentral()
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}

plugins {
    id 'se.patrikerdes.use-latest-versions' version '0.2.3'
    id 'com.github.ben-manes.versions' version '0.20.0'
    id 'org.hidetake.ssh' version '2.9.0'
}

group 'app.graviton'
version '1'

apply plugin: 'java'
apply plugin: 'application'
apply plugin: 'kotlin'

sourceCompatibility = 1.8
targetCompatibility = 1.8

mainClassName = "app.graviton.shell.Graviton"
ext.moduleName = "graviton.browser"

allprojects {
    repositories {
        mavenLocal()
        mavenCentral()
        maven { url 'https://jitpack.io' }
    }
}

dependencies {
    compile project(":graviton-shell")
    compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    testCompile group: 'junit', name: 'junit', version: '4.12'
}

compileKotlin {
    kotlinOptions.jvmTarget = "1.8"
}

compileTestKotlin {
    kotlinOptions.jvmTarget = "1.8"
}

def allJars = configurations.runtime.collect { it.getName() }

jar {
    inputs.property("moduleName", moduleName)
    manifest {
        attributes(
                'Automatic-Module-Name': moduleName,
                'Main-Class': mainClassName,
                'Class-Path': allJars.join(' ')
        )
    }
}

test {
    failFast = true
}

task copyBootstrapToLibs(type: Copy, dependsOn: [installDist, tasks.getByPath(':bootstrap:compileKonan')]) {
    def os = System.properties['os.name'].toLowerCase()
    if (os.contains('mac'))
        from 'bootstrap/build/konan/bin/macos_x64'
    else if (os.contains('win'))
        from 'bootstrap/build/konan/bin/mingw_x64'
    else if (os.contains('linux'))
        from 'bootstrap/build/konan/bin/linux_x64'
    from 'LICENSE'
    into('build/install/graviton/lib')
}

// Used from the package-mac.sh script.
task printVersion {
    doFirst {
        println project.version
    }
}

task makeWinInstaller(type: Exec, dependsOn: [copyBootstrapToLibs]) {
    workingDir project.projectDir
    def outDir = "${buildDir}/packaged"
    outputs.dir(outDir)
    inputs.files(copyBootstrapToLibs.outputs)
    inputs.files("package/windows")
    outputs.file("build/packaged/GravitonBrowser.exe")

    // Export it so the InnoSetup pre-processor can use it.
    environment "GRAVITON_VERSION", project.version

    commandLine = [
            'javapackager',
            '-deploy',
            '-nosign',
            '-native', 'exe',
            '-outdir', outDir,
            '-outfile', 'GravitonBrowser',
            '-name', 'GravitonBrowser',
            '-appclass', mainClassName,
            '-srcdir', 'build/install/graviton/lib',
            "-BmainJar=graviton-${project.version}.jar",
            '-Bidentifier=app.graviton.browser',
            "-Bappversion=${project.version}",
            '-BsystemWide=false',   // So UAC/admin privs aren't needed for update
            '-BinstalldirChooser=false',
            '-Bvendor=Graviton Team',
            '-Bicon=GravitonBrowser.ico',
            '-BmenuHint=true',
            '-Bwin.menuGroup=Graviton Browser',
            '-v'
    ]
}

def winInstallerPath = "build/packaged/bundles/GravitonBrowser.exe"

// You need InnoSetup and the Windows SDK to run this task. For code signing you also need a valid certificate and
// accessible private key.
task packageWin(type: Exec, dependsOn: [makeWinInstaller]) {
    group = "Packaging"
    description = "Build the EXE installer for Windows and sign it"

    inputs.files(winInstallerPath)

    // Now sign the EXE to help reduce warnings from IE.
    commandLine = ['signtool', 'sign', '/a', '/t', 'http://time.certum.pl', '/fd', 'sha256', '/v', '/debug', 'build\\packaged\\bundles\\GravitonBrowser.exe']
}

remotes {
    updateSite {
        host = 'plan99.net'
        user = 'graviton'
        identity = new File("${System.properties['user.home']}/.ssh/id_rsa")
    }
}

task uploadUpdates {
    inputs.files(winInstallerPath, "online-update-packages/${version}.linux.jar", "online-update-packages/${version}.mac.jar")
    doLast {
        ssh.run {
            session(remotes.updateSite) {
                // Windows
                println("Uploading Windows files ...")
                put from: winInstallerPath, into: "updates/${version}.win.exe"
                put text: "Latest-Version-URL: /${version}.win.exe", into: "updates/win/control"
                execute """#!/bin/sh
                           cd ~/updates/win/
                           ln -sf ../${version}.win.exe Graviton.exe
                        """

                // Linux
                println("Uploading Linux files ...")
                put from: "online-update-packages/${version}.linux.jar", into: "updates/${version}.linux.jar"
                put from: "build/packaged/bundles/graviton.tar.gz", into: "updates/graviton.tar.gz"
                put text: "Latest-Version-URL: /${version}.linux.jar", into: "updates/linux/control"

                // macOS
                println("Uploading macOS files ...")
                put from: "online-update-packages/${version}.mac.jar", into: "updates/${version}.mac.jar"
                put from: "build/packaged/bundles/Graviton-${version}.dmg", into: "updates/Graviton.dmg"
                put text: "Latest-Version-URL: /${version}.mac.jar", into: "updates/mac/control"
            }
        }
    }
}

task refreshAPIDocs(type: Copy) {
    dependsOn(getTasks().findByPath(":api:javadoc"))
    from 'api/build/docs/javadoc'
    into 'website/source/_static/api'
}